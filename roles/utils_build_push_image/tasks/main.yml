- name: Check that local_image_name is defined
  fail: msg="Bailing out. This play requires 'local_image_name'"
  when: local_image_name is undefined

- name: Check that image_tag is defined
  fail: msg="Bailing out. This play requires 'image_tag'"
  when: image_tag is undefined

- name: Create build config from template
  command: 
    /bin/bash "{{ utils_create_build_config_script }}" 
      -n "{{ local_image_name }}"
      -t "{{ image_tag }}"
      -d "{{ docker_path }}"
      -g "{{ git_repo }}"
      -p "{{ git_path }}"
      -q "{{ quay_repo }}"
      -a "{{ auth_file }}"
      -b "{{ branch }}"
      -o "{{ build_config_output_dir }}"

- name: Create namespace for images if doesn't exist
  shell: kubectl create namespace utils-ci --dry-run=client -o yaml | kubectl apply -f -

- name: Delete old image build config
  command: oc delete -f "{{ build_config_output_dir }}/config.yml"
  failed_when: false

- name: Apply image build config
  command: oc apply -f "{{ build_config_output_dir }}/config.yml"

- name: Get the name of the build
  command:
    oc get builds
        -lbuildconfig={{ local_image_name }}
        -oname
        -n utils-ci
  register: build_name_cmd
  failed_when: build_name_cmd.stdout | length == 0

- name: Get build config description
  command: oc describe --namespace=utils-ci bc/ssd
  register: build_config_desc
  failed_when: build_config_desc.stdout | length == 0

- block:
  - name: Wait for the image to be built
    command:
      oc get {{ build_name_cmd.stdout }}
          -ojsonpath={.status.phase}
          -n utils-ci
    register: wait_img_build
    until: "'Complete' in wait_img_build.stdout or 'Failed' in wait_img_build.stdout"
    retries: 40
    delay: 30

  - name: Get build config description (again)
    command: oc describe --namespace=utils-ci bc/ssd
    register: build_config_desc_post
    failed_when: build_config_desc_post.stdout | length == 0

  - name: Fail if the image failed to be built
    when: "'Failed' in wait_img_build.stdout"
    fail: msg="The image failed to build"

  always:
  - name: Store the logs of image build (debug)
    shell:
      oc logs {{ build_name_cmd.stdout }} -n utils-ci
          > {{ artifact_extra_logs_dir }}/image-build.log
    failed_when: false
