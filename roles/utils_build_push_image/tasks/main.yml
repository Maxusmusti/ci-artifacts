- name: Check that local_image_name is defined
  fail: msg="Bailing out. This play requires 'local_image_name'"
  when: local_image_name is undefined

- name: Check that image_tag is defined
  fail: msg="Bailing out. This play requires 'image_tag'"
  when: image_tag is undefined

- name: Check that branch is defined
  fail: msg="Bailing out. This play requires 'branch'"
  when: branch is undefined

- name: Check that artifact_extra_logs_dir is defined
  fail: msg="Bailing out. This play requires 'artifact_extra_logs_dir'"
  when: artifact_extra_logs_dir is undefined

- name: Check that memory is defined
  fail: msg="Bailing out. This play requires 'memory'"
  when: memory is undefined

- name: Create git repo BuildConfig from template
  template:
    src: "{{ utils_repo_buildconfig }}"
    dest: "{{ artifact_extra_logs_dir }}/image_buildconfig.yml"
    mode: 0400
  when: git_repo != ""

- name: Grab local Dockerfile content
  command: sed 's/^/      /' {{ docker_path }}
  register: dockerfile
  when: docker_path != ""

- name: Create git local BuildConfig from template
  template:
    src: "{{ utils_local_buildconfig }}"
    dest: "{{ artifact_extra_logs_dir }}/image_buildconfig.yml"
    mode: 0400
  when: docker_path != ""

- name: Create namespace for images if doesn't exist
  shell: oc create namespace utils-ci --dry-run=client -o yaml | oc apply -f -

- name: Create imagestream for image if doesn't exist
  command: oc create imagestream {{ local_image_name }} --namespace=utils-ci
  failed_when: false

- name: Delete old image BuildConfig if exists
  command: oc delete -f "{{ artifact_extra_logs_dir }}/image_buildconfig.yml"
  failed_when: false

- name: Apply image BuildConfig
  command: oc apply -f "{{ artifact_extra_logs_dir }}/image_buildconfig.yml"

- name: Get the name of the build
  command:
    oc get builds
        -lbuildconfig={{ local_image_name }}
        -oname
        -n utils-ci
  register: build_name_cmd
  failed_when: build_name_cmd.stdout | length == 0

- name: Get BuildConfig description
  command: oc describe --namespace=utils-ci bc/{{ local_image_name }}
  register: buildconfig_desc
  failed_when: buildconfig_desc.stdout | length == 0

- block:
  - name: Wait for the image to be built
    command:
      oc get {{ build_name_cmd.stdout }}
          -ojsonpath={.status.phase}
          -n utils-ci
    register: wait_img_build
    until: "'Complete' in wait_img_build.stdout or 'Failed' in wait_img_build.stdout"
    retries: 40
    delay: 30

  - name: Fail if the image failed to be built
    when: "'Failed' in wait_img_build.stdout"
    fail: msg="The image failed to build"

  always:
  - name: Get BuildConfig description (again)
    command: oc describe --namespace=utils-ci bc/{{ local_image_name }}
    register: buildconfig_desc_post
    failed_when: buildconfig_desc_post.stdout | length == 0

  - name: Store the logs of image build (debug)
    shell:
      oc logs {{ build_name_cmd.stdout }} -n utils-ci > {{ artifact_extra_logs_dir }}/image-build.log
    failed_when: false

- name: Create helper image BuildConfig from template
  template:
    src: "{{ utils_helper_image_buildconfig }}"
    dest: "{{ artifact_extra_logs_dir }}/helper.yml"
    mode: 0400

- name: Apply helper image BuildConfig
  command: oc apply -f "{{ artifact_extra_logs_dir }}/helper.yml"

- name: Get the name of the helper build
  command:
    oc get builds
        -lbuildconfig={{ local_image_name }}-helper
        -oname
        -n utils-ci
  register: helper_name_cmd
  failed_when: helper_name_cmd.stdout | length == 0

- block:
  - name: Wait for the helper image to be built
    command:
      oc get {{ helper_name_cmd.stdout }}
          -ojsonpath={.status.phase}
          -n utils-ci
    register: wait_helper_build
    until: "'Complete' in wait_helper_build.stdout or 'Failed' in wait_helper_build.stdout"
    retries: 40
    delay: 30

  - name: Fail if the helper image failed to be built
    when: "'Failed' in wait_helper_build.stdout"
    fail: msg="The helper image failed to build"

  always:
  - name: Store the logs of helper image build (debug)
    shell:
      oc logs {{ helper_name_cmd.stdout }} -n utils-ci > {{ artifact_extra_logs_dir }}/image-helper-build.log
    failed_when: false

- block:
  - name: Find the name of the builder-dockercfg secret
    shell:
      set -o pipefail;
      oc get secrets -oname -n utils-ci | cut -d/ -f2 | grep builder-dockercfg
    register: builder_secret_cmd

  - name: Store the name of the secret in a variable
    set_fact:
      builder_secret: "{{ builder_secret_cmd.stdout }}"
  rescue:
  - name: Failed to find the builder-dockercfg secret
    fail: msg="No builder-dockercfg secret in the 'utils-ci' namespace ..."

- name: Get quay.io secret name
  command:
    yq -r .metadata.name "{{ auth_file }}"
  register: quay_push_secret_name_cmd

- name: Store quay.io secret name
  set_fact:
    quay_push_secret_name: "{{ quay_push_secret_name_cmd.stdout }}"

- name: Create quay.io secret
  command:
    oc apply -f "{{ auth_file }}" -n utils-ci

- name: Apply the helper image script manifest
  shell:
    set -o pipefail;
    oc create cm helper-image-script
       -n utils-ci
       "--from-file=run-helper-image-push.sh={{ utils_helper_image_push_script }}"
       --dry-run -oyaml
       | oc apply -f-

- name: Instantiate the template of the image push pod
  template:
    src: "{{ utils_helper_image_push_pod }}"
    dest: "{{ artifact_extra_logs_dir }}/helper-image-push-pod.yml"
    mode: 0400

- name: Delete image push pod if already exists
  command: oc delete pod {{ local_image_name }}-push-pod -n utils-ci
  failed_when: false

- name: Create push pod and run image push
  command: oc apply -f {{ artifact_extra_logs_dir }}/helper-image-push-pod.yml

- block:
  - name: Wait for the helper image to be built
    command:
      oc get pods {{ local_image_name }}-push-pod
          -ojsonpath={.status.phase}
          -n utils-ci
    register: wait_final_pod
    until: "'Succeeded' in wait_final_pod.stdout or 'Failed' in wait_final_pod.stdout"
    retries: 40
    delay: 30

  - name: Fail if the helper image failed to be built
    when: "'Failed' in wait_final_pod.stdout"
    fail: msg="The helper image failed to build"

  always:
  - name: Store final build and push logs
    shell: oc logs {{ local_image_name }}-push-pod -n utils-ci > {{ artifact_extra_logs_dir }}/final-build-push.log
    failed_when: false
